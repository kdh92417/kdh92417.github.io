{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/basics",
    "result": {"pageContext":{"currentCategory":"basics","categories":["All","basics","book","javascript","review"],"edges":[{"node":{"id":"7d937d92-ba75-5a15-97f5-c5060cc971bf","excerpt":"4. 클래스 4. 1 단일 책임 원칙(SRP) 지키기 하나의 클래스는 하나의 책임만 가지도록 한다. as-is to-be : 책임을 나눠서 Manager 클래스에게 책임을 전가 4. 2 응집도를 높이자 응집도는 클래스의 변수와 메서드들이 얼마나 유기적으로 엮여있냐를 나타내는 지표이다. 응집도가 높을수록 클래스의 메서드들은 인스턴스 변수들을 많이 사용 응집도가 낮을수록 클래스의 메서드들은 인스턴스 변수들을 적게 혹은 사용하지 않는다. as-is to-be 4. 3 변경하기 쉽게 만들자 새 기능을 수정하거나 기존 기능을 변경할 때, 코드의 변경을 최소화하는 게 중요하다 일반적으로 클래스(객체)는 구현(Concrete)와 추상(Abstract)으로 나뉘게 된다. 구현에는 실제 동작하는 구체적인 코드가, 추상은 인터페이스나 추상클래스처럼 기능을 개념화한 코드가 들어간다. 일반적으로 변경하기 쉽게 설계하기 위해선 추상화를 해두고 구체 클래스에 의존하지 않고 추상 클래스(인터페이스)에 의존하…","fields":{"slug":"/report-zero-to-one/"},"frontmatter":{"categories":"basics","title":"개발자의 실무를 위한 기본기 - 클린코드 (2)","date":"December 21, 2021"}},"next":{"fields":{"slug":"/basic-practical-skills-for-developers/"}},"previous":null}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}