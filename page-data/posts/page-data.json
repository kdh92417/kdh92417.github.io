{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"322b154f-f7f9-5318-ada4-4e6015aba46b","excerpt":"어떻게 하면 주니어 개발자로서 성장할 수 있을까? 더 낫은 개발자가 될 수 있을 까 고민하던 중에 인프런에 그랩님이 강의하신 ‘모든 개발자의 실무를 위한 올인원 기본기 클래스’ 강의가 있어 강의를 듣고 Step by Step 공부하고 정리하는 글을 쓰려고 합니다. 1.네이밍 컨벤션  :  Python, Ruby 등에서 권장  :  Java, Javascript 등에서 권장  : 대부분의 프로그래밍 언어에서 클래스를 네이밍할 때 사용  : HTML Element를 표현할 때 사용 네이밍 변수 : 명사 혹은 형용사로 작성 함수와 메서드 : 동사 혹은 형용사로 작성 클래스 : 일반적으로 명사로 작성 Tip 구체적이고 명시적으로 적을 것, 짧고 애매한 표현보다 길고 직관적인 표현이 낫다. 2. 주석, 포맷팅 2. 1 주석 네이밍으로 표현할 수 없는 영역을 주석으로 표현 법적인 정보를 담을 때 의도를 명확하게 설명할 떄 중요성을 강조할 떄 결과를 경고할 떄 2. 2 관용적으로 사용되는 키워…","fields":{"slug":"/basic-practical-skills-for-developers-one/"},"frontmatter":{"categories":"basics","title":"개발자의 실무를 위한 기본기 - 클린코드","date":"December 19, 2021"}},"next":{"fields":{"slug":"/report-zero-to-one/"}},"previous":null},{"node":{"id":"7d937d92-ba75-5a15-97f5-c5060cc971bf","excerpt":"스타트업 창업, 현실과 이상의 괴리감 어떻게 메꾸어갈 것인가? 스타트업에 관심이 많아 이번에 트레바리 독서모임에 참여하게되어 독후감을 작성해본다. 책을 읽기전 이테까지 철없는 저의 생각으로는 실력있고 저와 뜻이 맞는 사람들과 합심하여 스타트업을 창업하면 잘되지 않을까? 성공하지 않을까? 라고 생각을 하였습니다. 하지만, 이 책을 읽으면서 정말 안일한 생각이었구나라고 많이 느꼇습니다. Zero에서 One으로 비즈니스 모델을 다른 비즈니스를 모방하여 서비스를 만드는 것이 아니라 zero 에서 one 즉 진보한 비즈니스가 성공할 수 있다는 점 입니다. 그렇게 진보한 비즈니스를 선보이는 회사를 이끌어 나가고, 많은 사용자들에게 새로운 경험을 선사해주어야 회사가 무한한 성장할 수 있을 것입니다. 비즈니스와 세일즈 사용자들에게 새로운 기술을 이용하여 좀더 편리하고 문제를 해소 할 수 있는 제품을 만들어 서비스한다면 회사가 당연히 잘되지 않을까? 라고 생각 했습니다. 그리고 좋은 기술만 추구했…","fields":{"slug":"/report-zero-to-one/"},"frontmatter":{"categories":"book","title":"독후감 - Zero to One","date":"December 15, 2021"}},"next":{"fields":{"slug":"/review-udemy-lecture/"}},"previous":{"fields":{"slug":"/basic-practical-skills-for-developers-one/"}}},{"node":{"id":"5dce6921-03bf-55ee-afa2-ae6e733c8889","excerpt":"유데미 특강 - 개발자의 성장 온라인으로 개발자 성장에관한 특강이 있어서 회사 야근하면서 강의를 듣고, 정리하였습니다. 공부 1. 나만의 목차로 만들기 책이나 인강으로 공부할 때 전체 목차를 쑥 훑어본뒤, 나만의 목차로 만들어서 공부하기 2. 학습의 주도권을 가져오기 3. Input VS Output 강의를 듣거나 공부하면서 따라치는 것은 Clone Coding에 지나지 않다. 학습한 것을 가지고 나만의 Output으로 만들어내야 학습한 것을 자기것으로 만들 수 있다. 4. 자기 객관화(메타 인지) 함께 자라기 : 스터디, 해커톤, 동아리 등등.. 회사 지원하기 Top → Down : 가고싶은 회사 중 가장 어려운 회사부터 어려운 순서대로 회사 지원해보기 Bottom → Up : 가장 쉬운 회사부터 지원하면서 자기 객관화 해보기 피드백 주도 성장 피드백을 자주 빠르게 받을 수록 빠르게 성장할 수 있다. 1. 혼자 할 수 있는 것 테스트코드 2. 다른 사람들과 할 수 있는 것 코드리…","fields":{"slug":"/review-udemy-lecture/"},"frontmatter":{"categories":"review","title":"Udemy - 개발자의 성장 가이드","date":"December 15, 2021"}},"next":{"fields":{"slug":"/javascript-statement/"}},"previous":{"fields":{"slug":"/report-zero-to-one/"}}},{"node":{"id":"a263a41d-a5d9-5ec5-91c5-a0b7a24651ba","excerpt":"1. 문장(Statements) 과 표현식(Expressions) 문장(Statements) Javascript 에서 문장은 어떤 동작이 일어나도록 작성된 최소한의 코드덩어리를 가리킨다. 표현식 표현식은 결과적으로 하나의 값이 되는 모든 코드를 가리킨다. 어떤 하나의 값을 그대로 작성하는 것 → 표현식 연산자를 이용한 연산식 → 하나의 값 → 표현식 선언된 변수를 호출, 객체의 프로퍼티에 접근 → 하나의 값 → 표현식 ⇒ 결국 길이와는 상관없이 결과적으로 하나의 값이 되는 코드를 모두 표현식이라 한다. 표현식이면서 문장, 문장이면서 표현식 표현식인 문장 Vs 표현식이 아닌 문장 결과적으로 문장은 다시 표현식인 문장과, 표현식이 아닌 문장으로 나눌 수 있고, 이 둘을 구분하는 가장 간단한 방법은 구분하고자 하는 문장을 변수에 할당하거나 어떤 함수의 아규먼트로 전달해보는 것이다. ⇒   메소드의 아규먼트로  문을 전달하거나 어떤 변수에  반복문을 할당하게 되면  Error 가 발생하게…","fields":{"slug":"/javascript-statement/"},"frontmatter":{"categories":"javascript","title":"JavaScript - 문장(Statements)과 표현식(Expressions)","date":"December 07, 2021"}},"next":{"fields":{"slug":"/modern-javascript-2/"}},"previous":{"fields":{"slug":"/review-udemy-lecture/"}}},{"node":{"id":"20207bf2-233d-560d-87e4-3641c005acc5","excerpt":"함수를 만드는 방법 함수 선언(Function Declaration) 함수 표현식 (Function Expression) 함수 선언과 함수 표현식의 차이 기명 함수 표현식 (Named Function Expression) 함수 표현식으로 만들 때 선언하는 함수에 이름을 붙일 수 있다. 즉시 실행 함수 IIFE(Immediately Invoked Function Expression )라 한다. 함수 선언과 동시에 즉시 실행되는 함수 즉시 실행 함수의 활용 선언과 동시에 실행이 이뤄지기 때문에 일반적으로 프로그램 초기화 기능에 많이 사용 재사용이 필요없는 일회성 동작을 구성할 때 활용 함수의 리턴값을 바로 변수에 할당할떄 사용 값으로서 함수  에서 함수는 변수나 데이터구조 또는 다른 함수의 파라미터, 리턴값으로 할당되어질 수 있다. ⇒ 일급 함수 (Fisrt Class Function) 이라 한다. 콜백함수 다른 함수의 파라미터로 전달된 함수 고차 함수 함수를 리턴함수에서 리턴된 함수…","fields":{"slug":"/modern-javascript-2/"},"frontmatter":{"categories":"javascript","title":"모던 자바스크립트(2) - 함수 다루기","date":"December 04, 2021"}},"next":{"fields":{"slug":"/modern-javascript-1/"}},"previous":{"fields":{"slug":"/javascript-statement/"}}},{"node":{"id":"13efbda9-3b32-57d7-8a7c-bb41f333ff9a","excerpt":"모던 자바스크립트의 이해 모던 자바스크립트란? 현시점에 사용하기 적합한 범위 내에서 최신 버전의 표준을 준수하는 자바스크립트 Javascript vs ECMAScript Javascript는 프로그래밍 언어, ECMAScript는 프로그래밍 언어의 표준(모든 스크립트 언어의 표준) Javascript는 ECMAScript를 기반으로 하지만 ECMAScript에 정의된 내용뿐만 아니라, 다른 부가적인 기능도 있다.(ex DOM을 다루는 문법등 - ECMAScript표준화된 문법이아니라 WebIDL에서 표준화된 기술) Javascript의 동작원리 자료형이 유연 Number ( 기본형 ) String ( 기본형 ) Boolean ( 기본형 ) Null ( 기본형 ) undefined ( 기본형 ) Object (참조형) Symbol : 유일한 값을 만들 때 BigInt : 어멍 큰 숫자를 다룰 때 Symbol과 BigInt BigInt  는 자바스크립트에서 아주 큰 정수(Integer…","fields":{"slug":"/modern-javascript-1/"},"frontmatter":{"categories":"javascript","title":"모던 자바스크립트(1) - 자바스크립트의 동작 원리","date":"November 24, 2021"}},"next":{"fields":{"slug":"/contributing-to-the-opensource/"}},"previous":{"fields":{"slug":"/modern-javascript-2/"}}},{"node":{"id":"5a30b99f-388a-53cf-9be3-cfd705f29851","excerpt":"개요 오픈소스 컨트리뷰션 아카데미를 통해 Exporterhub.io 오픈소스 기여해볼 수 있는 기회를 가져봤다. 해당 오픈소스 이슈68번 의 각 들의 어떤 Contents가 저장되어있는지 확인하기 위해 Backend에서 각  들의 를 만들어 에게 보내는 작업을 해보기로했다. 개발환경 세팅 처음에 개발하기 위해 개발환경세팅을 해야했는데, 해당 프로젝트는 총 4개의 컨테이너가 동시에 띄워져 앱을 실행시키는 오픈소스였다. 그때 당시 나는  에 대해 단일 컨테이너를 띄우는 것만해보아서 어떻게 다중 컨테이너를 띄우는 상태에서 개발환경 세팅을 어떻게 해야될지 몰랐다 ㅜ.. 그래서 인프런 강좌에있는 따라하며 배우는 도커와 CI환경 을 결재해서  와 를 공부하였다. 부랴부랴 공부해서 삽질하기를 2주째.. 겨우겨우 로컬과 마운트해서 개발환경세팅해서 실행시켜보았는데, 그저 해당 오픈소스의 Install Guide를 잘 보고 따라하고,  파일내에서 개발할 컨테이너를 로컬과 마운트시켜 으로 실행시키면 …","fields":{"slug":"/contributing-to-the-opensource/"},"frontmatter":{"categories":"review","title":"오픈소스 기여하기 (오픈소스 컨트리뷰터 - Exporterhub.io)","date":"September 27, 2021"}},"next":null,"previous":{"fields":{"slug":"/modern-javascript-1/"}}}],"categories":["All","basics","book","review","javascript"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}